// Mocks generated by Mockito 5.4.5 from annotations
// in smart_tri_planner/test/data/datasources/ai_agent_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:dio/dio.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i6;
import 'package:smart_tri_planner/core/network/dio_client.dart' as _i3;
import 'package:smart_tri_planner/data/datasources/web_search_service.dart'
    as _i5;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeResponse_0<T> extends _i1.SmartFake implements _i2.Response<T> {
  _FakeResponse_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DioClient].
///
/// See the documentation for Mockito's code generation for more information.
class MockDioClient extends _i1.Mock implements _i3.DioClient {
  MockDioClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Response<dynamic>> get(
    String? path, {
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [path],
          {
            #queryParameters: queryParameters,
            #options: options,
          },
        ),
        returnValue:
            _i4.Future<_i2.Response<dynamic>>.value(_FakeResponse_0<dynamic>(
          this,
          Invocation.method(
            #get,
            [path],
            {
              #queryParameters: queryParameters,
              #options: options,
            },
          ),
        )),
      ) as _i4.Future<_i2.Response<dynamic>>);

  @override
  _i4.Future<_i2.Response<dynamic>> post(
    String? path, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
          },
        ),
        returnValue:
            _i4.Future<_i2.Response<dynamic>>.value(_FakeResponse_0<dynamic>(
          this,
          Invocation.method(
            #post,
            [path],
            {
              #data: data,
              #queryParameters: queryParameters,
              #options: options,
            },
          ),
        )),
      ) as _i4.Future<_i2.Response<dynamic>>);

  @override
  _i4.Stream<String> postStream(
    String? path, {
    dynamic data,
    Map<String, dynamic>? queryParameters,
    _i2.Options? options,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #postStream,
          [path],
          {
            #data: data,
            #queryParameters: queryParameters,
            #options: options,
          },
        ),
        returnValue: _i4.Stream<String>.empty(),
      ) as _i4.Stream<String>);
}

/// A class which mocks [WebSearchService].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebSearchService extends _i1.Mock implements _i5.WebSearchService {
  MockWebSearchService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<String> searchWeb(String? query) => (super.noSuchMethod(
        Invocation.method(
          #searchWeb,
          [query],
        ),
        returnValue: _i4.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #searchWeb,
            [query],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<String> searchTravelInfo(
    String? destination,
    String? type,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchTravelInfo,
          [
            destination,
            type,
          ],
        ),
        returnValue: _i4.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #searchTravelInfo,
            [
              destination,
              type,
            ],
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<String> searchCurrentInfo(String? location) => (super.noSuchMethod(
        Invocation.method(
          #searchCurrentInfo,
          [location],
        ),
        returnValue: _i4.Future<String>.value(_i6.dummyValue<String>(
          this,
          Invocation.method(
            #searchCurrentInfo,
            [location],
          ),
        )),
      ) as _i4.Future<String>);
}
